//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/_Project/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Suli.Asteroids
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9bbd0151-b451-4d11-9142-f5a6030dde6c"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""707474d4-5790-4110-803d-c9c0df4f79ec"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""8c44f2bf-c71d-4ab8-a25d-734262db9e2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""af75c251-0d07-4187-9251-6384b72f3b9a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5844c6a7-bfc1-42b0-96db-4143671c35bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ece50d63-76d1-40e9-8654-017802f18bed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""acdd1437-ebc9-4983-84c2-7cd06d424ca0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gun"",
            ""id"": ""f229255b-0597-4117-bca3-20498449bbd3"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""5d3e847f-cd54-4a87-94a8-d70107aafa53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7f929db-815e-4605-904f-472e6dbdefd4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Laser"",
            ""id"": ""a3db6a49-d8c6-4001-948f-9cf9967f4636"",
            ""actions"": [
                {
                    ""name"": ""Apply"",
                    ""type"": ""Button"",
                    ""id"": ""6bbe9624-e7cd-4921-81b6-60e6109e9d24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""372ee708-0747-405a-81aa-c05635cc95eb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""Apply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and keyboard"",
            ""bindingGroup"": ""Mouse and keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            // Gun
            m_Gun = asset.FindActionMap("Gun", throwIfNotFound: true);
            m_Gun_Shoot = m_Gun.FindAction("Shoot", throwIfNotFound: true);
            // Laser
            m_Laser = asset.FindActionMap("Laser", throwIfNotFound: true);
            m_Laser_Apply = m_Laser.FindAction("Apply", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Rotation;
        private readonly InputAction m_Player_Move;
        public struct PlayerActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Rotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                    @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Gun
        private readonly InputActionMap m_Gun;
        private IGunActions m_GunActionsCallbackInterface;
        private readonly InputAction m_Gun_Shoot;
        public struct GunActions
        {
            private @PlayerInput m_Wrapper;
            public GunActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_Gun_Shoot;
            public InputActionMap Get() { return m_Wrapper.m_Gun; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GunActions set) { return set.Get(); }
            public void SetCallbacks(IGunActions instance)
            {
                if (m_Wrapper.m_GunActionsCallbackInterface != null)
                {
                    @Shoot.started -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_GunActionsCallbackInterface.OnShoot;
                }
                m_Wrapper.m_GunActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                }
            }
        }
        public GunActions @Gun => new GunActions(this);

        // Laser
        private readonly InputActionMap m_Laser;
        private ILaserActions m_LaserActionsCallbackInterface;
        private readonly InputAction m_Laser_Apply;
        public struct LaserActions
        {
            private @PlayerInput m_Wrapper;
            public LaserActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Apply => m_Wrapper.m_Laser_Apply;
            public InputActionMap Get() { return m_Wrapper.m_Laser; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LaserActions set) { return set.Get(); }
            public void SetCallbacks(ILaserActions instance)
            {
                if (m_Wrapper.m_LaserActionsCallbackInterface != null)
                {
                    @Apply.started -= m_Wrapper.m_LaserActionsCallbackInterface.OnApply;
                    @Apply.performed -= m_Wrapper.m_LaserActionsCallbackInterface.OnApply;
                    @Apply.canceled -= m_Wrapper.m_LaserActionsCallbackInterface.OnApply;
                }
                m_Wrapper.m_LaserActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Apply.started += instance.OnApply;
                    @Apply.performed += instance.OnApply;
                    @Apply.canceled += instance.OnApply;
                }
            }
        }
        public LaserActions @Laser => new LaserActions(this);
        private int m_MouseandkeyboardSchemeIndex = -1;
        public InputControlScheme MouseandkeyboardScheme
        {
            get
            {
                if (m_MouseandkeyboardSchemeIndex == -1) m_MouseandkeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and keyboard");
                return asset.controlSchemes[m_MouseandkeyboardSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnRotation(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IGunActions
        {
            void OnShoot(InputAction.CallbackContext context);
        }
        public interface ILaserActions
        {
            void OnApply(InputAction.CallbackContext context);
        }
    }
}
